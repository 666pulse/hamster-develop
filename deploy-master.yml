---
apiVersion: v1
kind: Service
metadata:
  name: hamster-aline-master
spec:
  selector:
    app: hamster-aline-master
  type: NodePort
  ports:
    - name: aline-master-web
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30302
    - name: aline-master-grpc
      protocol: TCP
      port: 50001
      targetPort: 50001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hamster-aline-master
  labels:
    app: hamster-aline-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hamster-aline-master
  template:
    metadata:
      labels:
        app: hamster-aline-master
    spec:
      containers:
        - name: hamster-aline-master
          image: hamstershare/hamster-develop:${PIPELINE_ID}
          imagePullPolicy: Always
          env:
            - name: IC_NETWORK
              value: http://dfx.icp:4939
            - name: HOME
              value: /home/ubuntu
            - name: DB_HOST
              value: mysql
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: db_password
            - name: DOCKER_HOST
              value: tcp://docker:2376
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: "1"
            - name: OPENAI_API_KEY
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: openai_api_key
            - name: CLIENT_SECRETS
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: client_secrets
            - name: APPS_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: apps_client_id
            - name: APPS_CLIENT_SECRETS
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: apps_client_secerts
            - name: GATEWAY
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: gateway
            - name: METASCAN_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: meta_scan_username
            - name: METASCAN_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: meta_scan_password
            - name: AZURE_API_KEY
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: AZURE_API_KEY
            - name: AZURE_API_BASE
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: AZURE_API_BASE
            - name: AZURE_DEPLOYMENT_NAME
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: AZURE_DEPLOYMENT_NAME
            - name: ipfs_gateway
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: ipfs_gateway
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /root/pipelines
              name: aline-pipelines
            - mountPath: /root/workdir
              name: aline-workdir
            - mountPath: /home/ubuntu/pipelines
              name: aline-pipelines
            - mountPath: /home/ubuntu/workdir
              name: aline-workdir
            - mountPath: /certs
              name: docker-tls
              readOnly: true
            - name: kubeconfig
              mountPath: "/root/.kube"
              readOnly: true
      volumes:
        - name: aline-pipelines
          persistentVolumeClaim:
            claimName: aline-pipelines
        - name: aline-workdir
          persistentVolumeClaim:
            claimName: aline-workdir
        - name: docker-tls
          persistentVolumeClaim:
            claimName: docker-tls
        - name: kubeconfig
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: kubeconfig
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "kubeconfig"
                path: "config"

---
apiVersion: v1
kind: Service
metadata:
  name: docker
spec:
  selector:
    app: docker
  type: ClusterIP
  ports:
    - name: docker-rpc
      protocol: TCP
      port: 2376
      targetPort: 2376
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker
  labels:
    app: docker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docker
  template:
    metadata:
      labels:
        app: docker
    spec:
      containers:
        - name: docker
          image: docker:dind
          imagePullPolicy: IfNotPresent
          args:
            - --storage-driver
            - overlay2
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          ports:
            - containerPort: 2376
          volumeMounts:
            - mountPath: /root/pipelines
              name: aline-pipelines
            - mountPath: /root/workdir
              name: aline-workdir
            - mountPath: /root/.move
              name: aptos-move-cache
            - mountPath: /certs
              name: docker-tls
            - mountPath: /home/ubuntu/workdir
              name: aline-workdir
          securityContext:
            privileged: true
      volumes:
        - name: aline-pipelines
          persistentVolumeClaim:
            claimName: aline-pipelines
        - name: aline-workdir
          persistentVolumeClaim:
            claimName: aline-workdir
        - name: docker-tls
          persistentVolumeClaim:
            claimName: docker-tls
        - name: aptos-move-cache
          persistentVolumeClaim:
            claimName: aptos-move-cache

---
apiVersion: v1
kind: Service
metadata:
  name: docker2
spec:
  selector:
    app: docker2
  type: ClusterIP
  ports:
    - name: docker-rpc
      protocol: TCP
      port: 2376
      targetPort: 2376
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker2
  labels:
    app: docker2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: docker2
  template:
    metadata:
      labels:
        app: docker2
    spec:
      containers:
        - name: docker2
          image: docker:dind
          imagePullPolicy: IfNotPresent
          args:
            - --storage-driver
            - overlay2
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          ports:
            - containerPort: 2376
          volumeMounts:
            - mountPath: /root/pipelines
              name: aline-worker-pipelines
            - mountPath: /root/workdir
              name: aline-worker-workdir
            - mountPath: /certs
              name: docker2-tls
          securityContext:
            privileged: true
      volumes:
        - name: aline-worker-pipelines
          persistentVolumeClaim:
            claimName: aline-worker-pipelines
        - name: aline-worker-workdir
          persistentVolumeClaim:
            claimName: aline-worker-workdir
        - name: docker2-tls
          persistentVolumeClaim:
            claimName: docker2-tls
